# -*- coding: utf-8 -*-
"""
Created on Fri Jun  5 2020

Last Updated on Tue Nov 17 2020

@authors: ANDREA.SHEN, NICK.GAUGLER
"""
import pandas as pd
import numpy as np
import tempfile
import shutil

#   ceqq#A}2)k-)!}t3%KF+dAe.

#####################################################
############  PIF_VEH_01 - Import & Merge ###########
#####################################################

"""Patch from https://stackoverflow.com/questions/21799210/python-copy-larger-file-too-slow / Commented that shutil should be updated slightly with Python 3.8+"""
def _copyfileobj_patched(fsrc, fdst, length=16*1024*1024):
    """Patches shutil method to hugely improve copy speed"""
    while 1:
        buf = fsrc.read(length)
        if not buf:
            break
        fdst.write(buf)
shutil.copyfileobj = _copyfileobj_patched

def calc_impacts(temp_db, cov_list_st2, col_prem):
    for cvg in cov_list_st2:
        temp_lev_veh_mask = temp_db['lev_{}_{}'.format(col_prem, cvg)]>0
        temp_pro_veh_mask = temp_db['pro_{}_{}'.format(col_prem, cvg)]>0
        temp_unw_veh_mask = temp_db['unw_{}_{}'.format(col_prem, cvg)]>0 
        temp_str_veh_mask = temp_db['str_{}_{}'.format(col_prem, cvg)]>0
        temp_db.loc[temp_lev_veh_mask & temp_pro_veh_mask, 'OB_ACT_{}'.format(cvg)] = round(temp_db['pro_{}_{}'.format(col_prem, cvg)]/temp_db['lev_{}_{}'.format(col_prem, cvg)]-1,4)
        temp_db.loc[~temp_lev_veh_mask, 'OB_ACT_{}'.format(cvg)] = np.nan
        temp_db.loc[~temp_pro_veh_mask, 'OB_ACT_{}'.format(cvg)] = np.nan
        temp_veh_mask = round(temp_db['pro_{}_{}'.format(col_prem, cvg)],1)<=round(temp_db['lev_{}_{}'.format(col_prem, cvg)],1)    
        temp_db.loc[temp_veh_mask & temp_lev_veh_mask & temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 1
        temp_db.loc[~temp_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
        temp_db.loc[~temp_lev_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
        temp_db.loc[~temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
        temp_db.loc[temp_unw_veh_mask & temp_pro_veh_mask, 'OB_BAS_{}'.format(cvg)] = round(temp_db['pro_{}_{}'.format(col_prem, cvg)]/temp_db['unw_{}_{}'.format(col_prem, cvg)]-1,4)
        temp_db.loc[~temp_unw_veh_mask, 'OB_BAS_{}'.format(cvg)] = np.nan
        temp_db.loc[~temp_pro_veh_mask, 'OB_BAS_{}'.format(cvg)] = np.nan 
        temp_db.loc[temp_lev_veh_mask & temp_unw_veh_mask, 'OB_UNW_{}'.format(cvg)] = round(temp_db['unw_{}_{}'.format(col_prem, cvg)]/temp_db['lev_{}_{}'.format(col_prem, cvg)]-1,4)
        temp_db.loc[~temp_lev_veh_mask, 'OB_UNW_{}'.format(cvg)] = np.nan
        temp_db.loc[~temp_unw_veh_mask, 'OB_UNW_{}'.format(cvg)] = np.nan
        ''' This needs updated for UM/UIM/MED coverages to not need premiums'''
        temp_db.loc[temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 1
        temp_db.loc[~temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 0
        if col_prem != 'tech_price':
            temp_pro_aged_veh_mask = temp_db['pro_{}_aged_{}'.format(col_prem, cvg)]>0
            temp_db.loc[temp_pro_aged_veh_mask & temp_str_veh_mask, 'OB_STR_{}'.format(cvg)] = round(temp_db['pro_{}_aged_{}'.format(col_prem, cvg)]/temp_db['str_{}_{}'.format(col_prem, cvg)]-1,4)
            temp_db.loc[~temp_pro_aged_veh_mask, 'OB_STR_{}'.format(cvg)] = np.nan
            temp_db.loc[~temp_str_veh_mask, 'OB_STR_{}'.format(cvg)] = np.nan
            temp_veh_mask = round(temp_db['pro_{}_aged_{}'.format(col_prem, cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem, cvg)],1) 
            temp_db.loc[temp_veh_mask & temp_pro_aged_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1
            temp_db.loc[~temp_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_pro_aged_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
        else:
            temp_db.loc[temp_pro_veh_mask & temp_str_veh_mask, 'OB_STR_{}'.format(cvg)] = round(temp_db['pro_{}_{}'.format(col_prem, cvg)]/temp_db['str_{}_{}'.format(col_prem, cvg)]-1,4)
            temp_db.loc[~temp_pro_veh_mask, 'OB_STR_{}'.format(cvg)] = np.nan
            temp_db.loc[~temp_str_veh_mask, 'OB_STR_{}'.format(cvg)] = np.nan     
            temp_veh_mask = round(temp_db['pro_{}_{}'.format(col_prem, cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem, cvg)],1) 
            temp_db.loc[temp_veh_mask & temp_pro_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1
            temp_db.loc[~temp_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_pro_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0               
    return temp_db

def pif_veh_main(cls_run):
    temp_filepath = tempfile.gettempdir() + '/temp.csv'
    rsltpif_dir = cls_run.main_dir+'/results/PIF'
    datapif_dir = cls_run.main_dir+'/data/PIF'
    ref_dir = cls_run.main_dir+'/python/aob_tool_reports/ref_tbl'
    out_dir = cls_run.main_dir+'/reports_inputs'
    
    FLD_KP=pd.read_csv(ref_dir + "/FIELDS_KP.csv")
    COV=pd.read_csv(ref_dir + "/COV.csv")
    COV_list = [row for row in COV['COV']]
    # move down this line of code OB_ONEWAY_FLD=pd.read_csv(ref_dir + "/OB_ONEWAY_FIELDS.csv")
    
    # PLCY DATA
    PIF_DATA_PLCY = pd.read_csv(datapif_dir + '/PIF_plcy'+cls_run.suffix_product+'.csv', usecols = list(FLD_KP.loc[FLD_KP['TABLE']=='PIF_DATA_PLCY','FIELD']))
    
    FLD=FLD_KP[FLD_KP.TABLE == 'PIF_ONLVL_PLCY'] #Street use Onlvl fields
    temp_usecols = list(FLD['FIELD'])+list(['cap_fctr'])
    PIF_STREET_PLCY = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Street_plcy'+cls_run.suffix_product+'.csv', usecols = temp_usecols)
    PIF_STREET_PLCY = PIF_STREET_PLCY.add_prefix('str_')
    PIF_ONLVL_PLCY = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_OnLevel_plcy'+cls_run.suffix_product+'.csv', usecols = temp_usecols)
    PIF_ONLVL_PLCY = PIF_ONLVL_PLCY.add_prefix('lev_')
    
    PIF_PROPOSED_PLCY = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Proposed_plcy'+cls_run.suffix_product+'.csv', usecols = list(FLD_KP.loc[FLD_KP['TABLE']=='PIF_PROPOSED_PLCY','FIELD']))
    PIF_PROPOSED_PLCY = PIF_PROPOSED_PLCY.add_prefix('pro_')
    
    PIF_UNWIND_PLCY = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Unwind_plcy'+cls_run.suffix_product+'.csv', usecols = ['src_hh_num','plcy_cntrct_num','cap_fctr'])
    PIF_UNWIND_PLCY = PIF_UNWIND_PLCY.add_prefix('unw_')
        
    # MERGE PLCY DATA
    plcymrg_temp01 \
            = pd.merge(PIF_DATA_PLCY, PIF_STREET_PLCY,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'], right_on = ['str_src_hh_num','str_plcy_cntrct_num'], how = 'inner')
    plcymrg_temp01 \
            = pd.merge(plcymrg_temp01, PIF_ONLVL_PLCY,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'], right_on = ['lev_src_hh_num','lev_plcy_cntrct_num'], how = 'inner')
    plcymrg_temp01 \
            = pd.merge(plcymrg_temp01, PIF_UNWIND_PLCY,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'], right_on = ['unw_src_hh_num','unw_plcy_cntrct_num'], how = 'inner')
    plcymrg_temp01 \
            = pd.merge(plcymrg_temp01, PIF_PROPOSED_PLCY,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'], right_on = ['pro_src_hh_num','pro_plcy_cntrct_num'], how = 'inner') 
   
    ## VEH DATA
    FLD=FLD_KP[FLD_KP.TABLE == 'PIF_DATA_VEH']
    temp_usecols = list(FLD['FIELD'])+list(['VEH_IN_PLCY_IND'])
    PIF_DATA_VEH = pd.read_csv(datapif_dir + '/PIF_veh'+cls_run.suffix_product+'.csv', usecols=temp_usecols)
    PIF_DATA_VEH = PIF_DATA_VEH[PIF_DATA_VEH['VEH_IN_PLCY_IND'] == 'Y']
    del PIF_DATA_VEH['VEH_IN_PLCY_IND']

    vehcol_cap_prem = ['cap_prem_aged_{}'.format(col) for col in COV_list] + ['cap_prem_{}'.format(col) for col in COV_list] 
    vehcol_uncap_prem = ['uncap_prem_aged_{}'.format(col) for col in COV_list] + ['uncap_prem_{}'.format(col) for col in COV_list]    
    vehcol_tech_price = ['tech_price_aged_{}'.format(col) for col in COV_list] + ['tech_price_{}'.format(col) for col in COV_list]
    
    ## VEH STREET/ONLVL/UNWIND
    ''' Street/OnLevel/Unwind use Onlvl fields '''
    FLD=FLD_KP[FLD_KP.TABLE == 'PIF_ONLVL_VEH'] #Street use Onlvl fields
    temp_usecols = list(FLD['FIELD'])+vehcol_cap_prem+vehcol_uncap_prem+vehcol_tech_price
    PIF_STREET_VEH = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Street_veh'+cls_run.suffix_product+'.csv', usecols = temp_usecols).add_prefix('str_')
    PIF_ONLVL_VEH = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Onlevel_veh'+cls_run.suffix_product+'.csv', usecols = temp_usecols).add_prefix('lev_')
    PIF_UNWIND_VEH = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Unwind_veh'+cls_run.suffix_product+'.csv', usecols = temp_usecols).add_prefix('unw_')

    ## VEH PROPOSED
    ''' PROPOSED use PROPOSED fields '''
    FLD=FLD_KP[FLD_KP.TABLE == 'PIF_PROPOSED_VEH'] #PROPOSED use PROPOSED fields
    temp_usecols = list(FLD['FIELD'])+vehcol_cap_prem+vehcol_uncap_prem+vehcol_tech_price
    PIF_PROPOSED_VEH = pd.read_csv(rsltpif_dir + '/'+cls_run.state_abbr+'_PIF_Proposed_veh'+cls_run.suffix_product+'.csv', usecols = temp_usecols).add_prefix('pro_')
    
    ## MERGE VEH DATA
    vehmrg_temp01 \
            = pd.merge(PIF_DATA_VEH,
                 PIF_STREET_VEH,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM','SOI_ID'],
                 right_on = ['str_src_hh_num','str_plcy_cntrct_num','str_soi_id'],
                 how = 'inner')
        
    vehmrg_temp01 \
            = pd.merge(vehmrg_temp01,
                 PIF_ONLVL_VEH,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM','SOI_ID'],
                 right_on = ['lev_src_hh_num','lev_plcy_cntrct_num','lev_soi_id'],
                 how = 'inner')
    vehmrg_temp01 \
            = pd.merge(vehmrg_temp01,
                 PIF_UNWIND_VEH,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM','SOI_ID'],
                 right_on = ['unw_src_hh_num','unw_plcy_cntrct_num','unw_soi_id'],
                 how = 'inner')
    vehmrg_temp01 \
            = pd.merge(vehmrg_temp01,
                 PIF_PROPOSED_VEH,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM','SOI_ID'],
                 right_on = ['pro_src_hh_num','pro_plcy_cntrct_num','pro_soi_id'],
                 how = 'inner')
    
    ## MERGE PLCY VEH DATA
    allmrg_temp01 \
            = pd.merge(plcymrg_temp01,
                 vehmrg_temp01,
                 left_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'],
                 right_on = ['SRC_HH_NUM','PLCY_CNTRCT_NUM'],
                 how = 'inner')
    del plcymrg_temp01
    del vehmrg_temp01
    
    #######################################################
    ###########  PIF_VEH_02 - DATA_DUMP_VEH_PIF ###########
    #######################################################
    
    ## BLENDING
    cov_liab=COV[(COV.COV_TYP == 'LIAB')].COV.tolist()
    cov_physdam=COV[(COV.COV_TYP == 'PHYSDAM')].COV.tolist()
    
    ## BOOK PIF_CAP
    capvehcol_str_prem2 = [col for col in allmrg_temp01 if col.startswith('str_cap_prem_') & ~col.startswith('str_cap_prem_aged_')]+['str_cap_prem_LIAB','str_cap_prem_PHYSDAM','str_cap_prem_TOTAL']
    
    capvehcol_pro_aged_prem = [col for col in allmrg_temp01 if col.startswith('pro_cap_prem_aged_')]
    capvehcol_pro_aged_prem2 = capvehcol_pro_aged_prem + ['pro_cap_prem_aged_LIAB','pro_cap_prem_aged_PHYSDAM','pro_cap_prem_aged_TOTAL']

    capvehcol_lev_prem = [col for col in allmrg_temp01 if col.startswith('lev_cap_prem_') & ~col.startswith('lev_cap_prem_aged_')]
    capvehcol_lev_prem2=capvehcol_lev_prem+['lev_cap_prem_LIAB','lev_cap_prem_PHYSDAM','lev_cap_prem_TOTAL']
    
    capvehcol_unw_prem = [col for col in allmrg_temp01 if col.startswith('unw_cap_prem_') & ~col.startswith('unw_cap_prem_aged_')]
    capvehcol_unw_prem2=capvehcol_unw_prem+['unw_cap_prem_LIAB','unw_cap_prem_PHYSDAM','unw_cap_prem_TOTAL']

    capvehcol_pro_prem = [col for col in allmrg_temp01 if col.startswith('pro_cap_prem_') & ~col.startswith('pro_cap_prem_aged_')]
    capvehcol_pro_prem2=capvehcol_pro_prem+['pro_cap_prem_LIAB','pro_cap_prem_PHYSDAM','pro_cap_prem_TOTAL'] 
    
    ## BOOK PIF_UNCAP
    uncapvehcol_str_prem2=[col for col in allmrg_temp01 if col.startswith('str_uncap_prem_') & ~col.startswith('str_uncap_prem_aged_')]+['str_uncap_prem_LIAB','str_uncap_prem_PHYSDAM','str_uncap_prem_TOTAL']
    uncapvehcol_pro_aged_prem2=[col for col in allmrg_temp01 if col.startswith('pro_uncap_prem_aged_')]+['pro_uncap_prem_aged_LIAB','pro_uncap_prem_aged_PHYSDAM','pro_uncap_prem_aged_TOTAL']
    uncapvehcol_lev_prem2=[col for col in allmrg_temp01 if col.startswith('lev_uncap_prem_') & ~col.startswith('lev_uncap_prem_aged_')]+['lev_uncap_prem_LIAB','lev_uncap_prem_PHYSDAM','lev_uncap_prem_TOTAL']
    uncapvehcol_unw_prem2=[col for col in allmrg_temp01 if col.startswith('unw_uncap_prem_') & ~col.startswith('unw_uncap_prem_aged_')]+['unw_uncap_prem_LIAB','unw_uncap_prem_PHYSDAM','unw_uncap_prem_TOTAL']
    uncapvehcol_pro_prem2=[col for col in allmrg_temp01 if col.startswith('pro_uncap_prem_') & ~col.startswith('pro_uncap_prem_aged_')]+['pro_uncap_prem_LIAB','pro_uncap_prem_PHYSDAM','pro_uncap_prem_TOTAL']
    
    ## BOOK NB_UNCAP
    # To be consistent with SAS program, add all premium impacts for NB
    uncapvehnbcol_str_prem2 = [col for col in allmrg_temp01 if col.startswith('str_tech_price_') & ~col.startswith('str_tech_price_aged_') & ~col.endswith('_aged_min')]+['str_tech_price_LIAB','str_tech_price_PHYSDAM','str_tech_price_TOTAL']
    uncapvehnbcol_lev_prem2 = [col for col in allmrg_temp01 if col.startswith('lev_tech_price_') & ~col.startswith('lev_tech_price_aged_') & ~col.endswith('_aged_min')]+['lev_tech_price_LIAB','lev_tech_price_PHYSDAM','lev_tech_price_TOTAL']
    uncapvehnbcol_unw_prem2 = [col for col in allmrg_temp01 if col.startswith('unw_tech_price_') & ~col.startswith('unw_tech_price_aged_') & ~col.endswith('_aged_min')]+['unw_tech_price_LIAB','unw_tech_price_PHYSDAM','unw_tech_price_TOTAL']
    uncapvehnbcol_pro_prem2=[col for col in allmrg_temp01 if col.startswith('pro_tech_price_') & ~col.startswith('pro_tech_price_aged_') & ~col.endswith('_aged_min')]+['pro_tech_price_LIAB','pro_tech_price_PHYSDAM','pro_tech_price_TOTAL']
        
    ## BOOK PIF_CAP
    loop_sum = ['str_cap_prem','lev_cap_prem','unw_cap_prem','pro_cap_prem','pro_cap_prem_aged']
    for col_subset in loop_sum: 
        subset_temp = ['{}_{}'.format(col_subset, cvg) for cvg in COV_list]
        allmrg_temp01['{}_LIAB'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}_'.format(col_subset),'') in cov_liab]].sum(axis=1)
        allmrg_temp01['{}_PHYSDAM'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}_'.format(col_subset),'') in cov_physdam]].sum(axis=1)
        allmrg_temp01['{}_TOTAL'.format(col_subset)] = allmrg_temp01['{}_LIAB'.format(col_subset)] + allmrg_temp01['{}_PHYSDAM'.format(col_subset)]
    
    ## BOOK PIF_UNCAP
    loop_sum = ['str_uncap_prem','lev_uncap_prem','unw_uncap_prem','pro_uncap_prem','pro_uncap_prem_aged']
    for col_subset in loop_sum:
        subset_temp = ['{}_{}'.format(col_subset, cvg) for cvg in COV_list]
        allmrg_temp01['{}_LIAB'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}_'.format(col_subset),'') in cov_liab]].sum(axis=1)
        allmrg_temp01['{}_PHYSDAM'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}_'.format(col_subset),'') in cov_physdam]].sum(axis=1)
        allmrg_temp01['{}_TOTAL'.format(col_subset)] = allmrg_temp01['{}_LIAB'.format(col_subset)] + allmrg_temp01['{}_PHYSDAM'.format(col_subset)]
   
    ## BOOK NB_UNCAP
    ## No RLAF Factor Applied Here. Assume mod RE can handle this in RE
    loop_sum = ['str_tech_price_','lev_tech_price_','unw_tech_price_','pro_tech_price_']
    for col_subset in loop_sum:
        subset_temp = ['{}{}'.format(col_subset, cvg) for cvg in COV_list]
        allmrg_temp01['{}LIAB'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}'.format(col_subset),'') in cov_liab]].sum(axis=1)
        allmrg_temp01['{}PHYSDAM'.format(col_subset)] = allmrg_temp01[[col for col in subset_temp if col.replace('{}'.format(col_subset),'') in cov_physdam]].sum(axis=1)
        allmrg_temp01['{}TOTAL'.format(col_subset)] = allmrg_temp01['{}LIAB'.format(col_subset)] + allmrg_temp01['{}PHYSDAM'.format(col_subset)]
     
    ''' Uncomment this after testing '''
    allmrg_temp01.to_csv(temp_filepath,index=False)
    shutil.move(temp_filepath, out_dir+'/DATA_DUMP_VEH_PIF'+cls_run.suffix_product+'.csv')
    
    # min max Street number at policy number level
    minmaxtemp00 = allmrg_temp01.groupby(['PLCY_CNTRCT_NUM'])[['pro_cap_prem_aged_TOTAL','str_cap_prem_TOTAL']].sum()
    minmaxtemp00['Street_Impact']=minmaxtemp00['pro_cap_prem_aged_TOTAL']/minmaxtemp00['str_cap_prem_TOTAL']-1
    minmaxstrout=minmaxtemp00[minmaxtemp00['Street_Impact'] == minmaxtemp00['Street_Impact'].min()]
    minmaxstrout=minmaxstrout.append(minmaxtemp00[minmaxtemp00['Street_Impact'] == minmaxtemp00['Street_Impact'].max()]).reset_index() 
    ''' Uncomment this after testing '''                 
    minmaxstrout.to_csv(out_dir+'/MIN_MAX_PLCY'+cls_run.suffix_product+'.csv',index=False)
    
    minmax=pd.DataFrame()
    minmax['Str_Min']=[minmaxstrout.iloc[0]['Street_Impact']]
    minmax['Str_Max']=[minmaxstrout.iloc[-1]['Street_Impact']]
    ''' Uncomment this after testing '''
    minmax.to_csv(out_dir+'/MIN_MAX'+cls_run.suffix_product+'.csv',index=False)

    #################################################
    ############  PIF_VEH_03 - HH Summary ###########
    #################################################
    def calc_win_rates(lookup_db, book_name, col_prem):
        temp_db = pd.DataFrame(index = cov_list_st2, columns=['Book', 'Coverage'])
        temp_db['Coverage']= cov_list_st2
        temp_db['Book']=book_name  
        for cvg in cov_list_st2:
            if lookup_db['cvg_ind_{}'.format(cvg)].sum() >0:
                temp_db.loc[cvg,'Actuarial_HH_Win_Rate'] = lookup_db['WIN_ACT_{}'.format(cvg)].sum()/lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'Number_of_HH'] = lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'OnLevel_Avg_HH_Premium'] = lookup_db['lev_{}_{}'.format(col_prem, cvg)].sum()/lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'Proposed_Avg_HH_Premium'] = lookup_db['pro_{}_{}'.format(col_prem, cvg)].sum()/lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'Street_Avg_HH_Premium'] = lookup_db['str_{}_{}'.format(col_prem, cvg)].sum()/lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'Street_HH_Win_Rate'] = lookup_db['WIN_STR_{}'.format(cvg)].sum()/lookup_db['cvg_ind_{}'.format(cvg)].sum()
            else:
                temp_db.loc[cvg,'Actuarial_HH_Win_Rate'] = np.nan
                temp_db.loc[cvg,'Number_of_HH'] = lookup_db['cvg_ind_{}'.format(cvg)].sum()
                temp_db.loc[cvg,'OnLevel_Avg_HH_Premium'] = np.nan
                temp_db.loc[cvg,'Proposed_Avg_HH_Premium'] = np.nan
                temp_db.loc[cvg,'Street_Avg_HH_Premium'] = np.nan
                temp_db.loc[cvg,'Street_HH_Win_Rate'] = np.nan
                   
        temp_db = temp_db.reset_index().drop('index', axis=1)
           
        return temp_db
    cov_list_st2=[i for i in COV_list]+['LIAB','PHYSDAM','TOTAL']
    covindcol=['cvg_ind_'+ i for i in cov_list_st2]
    winactcol=['WIN_ACT_'+ i for i in cov_list_st2]
    winstrcol=['WIN_STR_'+ i for i in cov_list_st2]
    
    for cvg in cov_list_st2:
        veh_pro_prem_mask = allmrg_temp01['pro_cap_prem_{}'.format(cvg)]>0
        allmrg_temp01.loc[veh_pro_prem_mask, 'cvg_ind_{}'.format(cvg)] = 1
        allmrg_temp01.loc[~veh_pro_prem_mask, 'cvg_ind_{}'.format(cvg)] = 0

    #####################################
    # aggregate 2 - to overall HH level #
    #####################################
       
    # Household-level tables (only with premium fields for disruption and win rates)
    # Policies in Force (PIF) capped;
    PIF_CAP_HH = allmrg_temp01.groupby(['SRC_HH_NUM','pro_mkt_tier_calc'], as_index=False)[covindcol+capvehcol_pro_aged_prem2+capvehcol_str_prem2+\
                                                                                  capvehcol_lev_prem2+capvehcol_unw_prem2+capvehcol_pro_prem2].sum()
    PIF_CAP_HH = calc_impacts(PIF_CAP_HH, cov_list_st2, 'cap_prem')
    PIF_CAP_HH['Book']='PIF_CAPPED'
    PIF_CAP_HH2 = calc_win_rates(PIF_CAP_HH,'PIF_CAPPED','cap_prem')
    
    ## Policies in Force (PIF) uncapped;
    PIF_UNCAP_HH = allmrg_temp01.groupby(['SRC_HH_NUM','pro_mkt_tier_calc'], as_index=False)[covindcol+uncapvehcol_pro_aged_prem2+uncapvehcol_str_prem2+\
                                                                            uncapvehcol_lev_prem2+uncapvehcol_unw_prem2+uncapvehcol_pro_prem2].sum()
    PIF_UNCAP_HH = calc_impacts(PIF_UNCAP_HH, cov_list_st2, 'uncap_prem')
    PIF_UNCAP_HH['Book']='PIF_UNCAPPED'
    PIF_UNCAP_HH2 = calc_win_rates(PIF_UNCAP_HH,'PIF_UNCAPPED','uncap_prem')
    
    ## New Business (NB) uncapped;
    if cls_run.nbnh_run_indicator:
        allmrgnb_temp01 = pd.DataFrame(allmrg_temp01[(allmrg_temp01.NBRN_TYP == 'NBNH')])
        # aged is the same as pro_prem
        NB_UNCAP_HH = allmrgnb_temp01.groupby(['SRC_HH_NUM','pro_mkt_tier_calc'], as_index=False)[uncapvehnbcol_str_prem2+\
                                                                                 uncapvehnbcol_lev_prem2+uncapvehnbcol_unw_prem2+uncapvehnbcol_pro_prem2].sum()       
        NB_UNCAP_HH = calc_impacts(NB_UNCAP_HH, cov_list_st2, 'tech_price')
        NB_UNCAP_HH['Book']='NB_UNCAPPED'
        NB_UNCAP_HH2 = calc_win_rates(NB_UNCAP_HH,'NB_UNCAPPED','tech_price')
        NB_UNCAP_HH2.drop(['Street_HH_Win_Rate','Street_Avg_HH_Premium'], axis=1, inplace=True)
         
    else:
        NB_UNCAP_HH=pd.DataFrame()
           
    ###############################################
    ###############  PIF_VEH_04 - OB ##############
    
    ####################################
    # aggregate - to overall VEH level #
    ####################################    
    def agg_veh_impacts(temp_db, col_prem):
        for cvg in cov_list_st2:
            temp_lev_veh_mask = temp_db['lev_{}_{}'.format(col_prem,cvg)]>0
            temp_pro_veh_mask = temp_db['pro_{}_{}'.format(col_prem,cvg)]>0
            temp_str_veh_mask = temp_db['str_{}_{}'.format(col_prem,cvg)]>0
            
            temp_veh_mask = round(temp_db['pro_{}_{}'.format(col_prem,cvg)],1)<=round(temp_db['lev_{}_{}'.format(col_prem,cvg)],1) 
            temp_db.loc[temp_veh_mask & temp_lev_veh_mask & temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 1 
            temp_db.loc[~temp_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
            temp_db.loc[~temp_lev_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
            temp_db.loc[~temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0 
            if col_prem != 'tech_price':
                temp_pro_aged_veh_mask = temp_db['pro_{}_aged_{}'.format(col_prem,cvg)]>0
                temp_veh_mask =  round(temp_db['pro_{}_aged_{}'.format(col_prem,cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem,cvg)],1)
                temp_db.loc[temp_veh_mask & temp_pro_aged_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1 
                temp_db.loc[~temp_pro_aged_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            else:
                temp_veh_mask =  round(temp_db['pro_{}_{}'.format(col_prem,cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem,cvg)],1)
                temp_db.loc[temp_veh_mask & temp_pro_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1              
                temp_db.loc[~temp_pro_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            
            temp_db.loc[~temp_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            
            temp_db.loc[temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 1
            temp_db.loc[~temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 0 
        
        return temp_db
    
    def calc_veh_win_rates(lookup_db, book_name, col_prem):
        temp_db = pd.DataFrame(index = cov_list_st2, columns=['Book', 'Coverage'])
        temp_db['Coverage']= cov_list_st2
        temp_db['Book']=book_name  
        for cvg in cov_list_st2:
            temp_db.at[cvg, 'Number_of_Veh'] = lookup_db.at[0,'cvg_ind_{}'.format(cvg)]
            temp_db.at[cvg, 'Unwind_Total_Premium'] = lookup_db.at[0,'unw_{}_{}'.format(col_prem, cvg)]
            temp_db.at[cvg, 'OnLevel_Total_Premium'] = lookup_db.at[0,'lev_{}_{}'.format(col_prem, cvg)]
            temp_db.at[cvg, 'Street_Total_Premium'] = lookup_db.at[0,'str_{}_{}'.format(col_prem, cvg)]
            temp_db.at[cvg, 'Proposed_Total_Premium'] = lookup_db.at[0,'pro_{}_{}'.format(col_prem, cvg)]
            if col_prem != 'tech_price':
                temp_db.at[cvg, 'Proposed_Aged_Total_Premium'] = lookup_db.at[0,'pro_{}_aged_{}'.format(col_prem, cvg)]
            else:
                temp_db.at[cvg, 'Proposed_Aged_Total_Premium'] = temp_db.at[cvg, 'Proposed_Total_Premium']
    
        
        temp_db['Actuarial_Impact'] = round((temp_db['Proposed_Total_Premium'] / temp_db['OnLevel_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Base_Impact'] = round((temp_db['Proposed_Total_Premium'] / temp_db['Unwind_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Unwind_Impact'] = round((temp_db['Unwind_Total_Premium'] / temp_db['OnLevel_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Street_Impact'] = round((temp_db['Proposed_Aged_Total_Premium'] / temp_db['Street_Total_Premium']).fillna(np.nan)-1,4)
            
        for cvg in cov_list_st2: 
            if lookup_db.at[0,'cvg_ind_{}'.format(cvg)]>0:
                temp_db.at[cvg, 'Actuarial_Veh_Win_Rate'] = lookup_db.at[0,'WIN_ACT_{}'.format(cvg)]/temp_db.at[cvg, 'Number_of_Veh']
                temp_db.at[cvg, 'Street_Veh_Win_Rate'] = lookup_db.at[0,'WIN_STR_{}'.format(cvg)]/temp_db.at[cvg, 'Number_of_Veh']
                temp_db.at[cvg, 'Street_Avg_Veh_Premium'] = lookup_db.at[0,'str_{}_{}'.format(col_prem,cvg)]/temp_db.at[cvg, 'Number_of_Veh']
                temp_db.at[cvg, 'OnLevel_Avg_Veh_Premium'] = lookup_db.at[0,'lev_{}_{}'.format(col_prem,cvg)]/temp_db.at[cvg, 'Number_of_Veh'] 
                temp_db.at[cvg, 'Proposed_Avg_Veh_Premium'] = lookup_db.at[0,'pro_{}_{}'.format(col_prem,cvg)]/temp_db.at[cvg, 'Number_of_Veh']  

            else:
                temp_db.at[cvg, 'Actuarial_Veh_Win_Rate'] = np.nan
                temp_db.at[cvg, 'Street_Veh_Win_Rate'] = np.nan
                temp_db.at[cvg, 'Street_Avg_Veh_Premium'] = np.nan
                temp_db.at[cvg, 'OnLevel_Avg_Veh_Premium'] = np.nan 
                temp_db.at[cvg, 'Proposed_Avg_Veh_Premium'] = np.nan
        
        temp_db.sort_index(inplace=True)
        temp_db = temp_db.reset_index().drop('index', axis=1)
        
        return temp_db
    
    ## aggregate veh   
    ## PIF_CAPPED
    temp00=allmrg_temp01.copy()
    temp00 = agg_veh_impacts(temp00, 'cap_prem')
    temp00['Book']='PIF_CAPPED'
          
    temp01 = temp00.groupby(['Book'], as_index=False)[winactcol+winstrcol+covindcol+capvehcol_pro_aged_prem2+capvehcol_str_prem2+\
                                                   capvehcol_lev_prem2+capvehcol_unw_prem2+capvehcol_pro_prem2].sum()     
    temp03 = calc_veh_win_rates(temp01, 'PIF_CAPPED','cap_prem')   
    OB=temp03.merge(PIF_CAP_HH2, left_on=['Book', 'Coverage'], right_on=['Book', 'Coverage'])
    
    ## PIF_UNCAPPED
    temp00=allmrg_temp01.copy()
    temp00 = agg_veh_impacts(temp00, 'uncap_prem')
    temp00['Book']='PIF_UNCAPPED'
             
    temp01 = temp00.groupby(['Book'], as_index = False)[winactcol+winstrcol+covindcol+uncapvehcol_pro_aged_prem2+uncapvehcol_str_prem2+\
                                                       uncapvehcol_lev_prem2+uncapvehcol_unw_prem2+uncapvehcol_pro_prem2].sum() 
    temp03 = calc_veh_win_rates(temp01, 'PIF_UNCAPPED', 'uncap_prem')           
    OB=OB.append(temp03.merge(PIF_UNCAP_HH2, left_on=['Book', 'Coverage'], right_on=['Book', 'Coverage']))

    ## NB_UNCAPPED
    if cls_run.nbnh_run_indicator:
        temp00=pd.DataFrame(allmrg_temp01[(allmrg_temp01.NBRN_TYP == 'NBNH')])
        temp00 = agg_veh_impacts(temp00, 'tech_price')
        temp00['Book']='NB_UNCAPPED'    
                  
        temp01 = temp00.groupby(['Book'], as_index=False)[winactcol+winstrcol+covindcol+uncapvehnbcol_str_prem2+\
                                                       uncapvehnbcol_lev_prem2+uncapvehnbcol_unw_prem2+uncapvehnbcol_pro_prem2].sum()
        temp03 = calc_veh_win_rates(temp01, 'NB_UNCAPPED', 'tech_price')    
        temp03.drop(['Street_Impact','Street_Veh_Win_Rate','Street_Total_Premium','Street_Avg_Veh_Premium'], axis=1, inplace=True)
        
        OB=OB.append(temp03.merge(NB_UNCAP_HH2, left_on=['Book', 'Coverage'], right_on=['Book', 'Coverage']))
    
    #reorder
    list_OB_Blend_Columns = ['Book', 'Coverage', 'Actuarial_Impact', 'Base_Impact', 'Unwind_Impact', 'Street_Impact', \
                         'Actuarial_Veh_Win_Rate','Street_Veh_Win_Rate','Actuarial_HH_Win_Rate','Street_HH_Win_Rate','Number_of_Veh','Number_of_HH', \
                         'Street_Total_Premium', 'OnLevel_Total_Premium','Proposed_Total_Premium', \
                         'Street_Avg_Veh_Premium','OnLevel_Avg_Veh_Premium','Proposed_Avg_Veh_Premium', \
                         'Street_Avg_HH_Premium','OnLevel_Avg_HH_Premium','Proposed_Avg_HH_Premium']
    OB=OB[list_OB_Blend_Columns]
    
    OB.to_csv(out_dir+'/OB'+cls_run.suffix_product+'.csv',index=False)
    
    ###############################################
    ############  PIF_VEH_05 - OB 1 Way ###########
    ###############################################
    
    allmrg_temp01.loc[(allmrg_temp01['pro_homeowner_ind']=='Y')&(allmrg_temp01['pro_disc_auto_home']=='Y'), 'Homeowner']='Homeowner (Farmers Home)'
    allmrg_temp01.loc[(allmrg_temp01['pro_homeowner_ind']=='Y')&(allmrg_temp01['pro_disc_auto_home']=='N'), 'Homeowner']='Homeowner (no Farmers Home)'
    allmrg_temp01.loc[(allmrg_temp01['pro_homeowner_ind']=='N')&(allmrg_temp01['pro_disc_auto_home']=='Y'), 'Homeowner']='Not a Homeowner (Farmers Home)'
    allmrg_temp01.loc[(allmrg_temp01['pro_homeowner_ind']=='N')&(allmrg_temp01['pro_disc_auto_home']=='N'), 'Homeowner']='Not a Homeowner'

    allmrg_temp01['Homeowner_x_Multicar']=allmrg_temp01['pro_homeowner_ind']+allmrg_temp01['disc_multi_car']
    
    allmrg_temp01['Homeowner_x_FSPA_Market_Tier']=allmrg_temp01['pro_homeowner_ind']+'&'+allmrg_temp01['pro_mkt_tier_calc']  
    
    allmrg_temp01.loc[allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['A','B','C','D','E']), 'Credit_Group']='Best'
    allmrg_temp01.loc[allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['F','G','H','I','J']), 'Credit_Group']='Good'
    allmrg_temp01.loc[allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['K','L','M','N','O']), 'Credit_Group']='Average'
    allmrg_temp01.loc[allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['P','Q','R','S','T']), 'Credit_Group']='Modest'
    allmrg_temp01.loc[allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['U','V','W','X','Y']), 'Credit_Group']='Worst'
    allmrg_temp01.loc[allmrg_temp01['Credit_Group'].isnull(), 'Credit_Group']='No Hit'
    
    allmrg_temp01.loc[allmrg_temp01['pro_hh_struct_calc'].isin(['A: Youthful Married PNI','B: Youthful Single PNI']), 'HH_STRUCT_GROUP']='Youthful PNI'
    allmrg_temp01.loc[allmrg_temp01['pro_hh_struct_calc'].isin(['C: Child in Household -','C: Child in Household - All Single','D: Child in Household']), 'HH_STRUCT_GROUP']='Non- youthful PNI with a youth on policy'
    allmrg_temp01.loc[allmrg_temp01['HH_STRUCT_GROUP'].isnull(), 'HH_STRUCT_GROUP']='No Youthful'
    
    allmrg_temp01.loc[(allmrg_temp01['pro_PNI_age_group'].isin(['C','D','E','F','G','H','I','J','K','L']))\
                      &(allmrg_temp01['pro_homeowner_ind']=='Y')&(allmrg_temp01['prior_BI_lim_cd'].isin(['SH','HI']))\
                      &(allmrg_temp01['disc_multi_car']=='Y')&(allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O']))\
                      &(allmrg_temp01['CIF_CD'].isin(['H','HT'])), 'Ultra_Preferred']='Ultra-Preferred & Multicar'
    
    allmrg_temp01.loc[(allmrg_temp01['pro_PNI_age_group'].isin(['C','D','E','F','G','H','I','J','K','L']))\
                      &(allmrg_temp01['pro_homeowner_ind']=='Y')&(allmrg_temp01['prior_BI_lim_cd'].isin(['SH','HI']))\
                      &(allmrg_temp01['disc_multi_car']=='N')&(allmrg_temp01['LIAB_CRED_TIER_MDL_A'].isin(['A','B','C','D','E','F','ZA','G','H','I','J','K','L','M','N','O','P','Q','R']))\
                      &(allmrg_temp01['CIF_CD'].isin(['H','HT'])), 'Ultra_Preferred']='Ultra-Preferred & Single Car'
      
    allmrg_temp01.loc[allmrg_temp01['Ultra_Preferred'].isnull(), 'Ultra_Preferred']='Not Ultra-Preferred'
    
    ##OB_1WAY   
    def agg_veh_impacts_OB1Way(temp_db, col_prem):
        for cvg in cov_list_st2:
            temp_lev_veh_mask = temp_db['lev_{}_{}'.format(col_prem,cvg)]>0
            temp_pro_veh_mask = temp_db['pro_{}_{}'.format(col_prem,cvg)]>0
            temp_str_veh_mask = temp_db['str_{}_{}'.format(col_prem,cvg)]>0
            
            temp_veh_mask = round(temp_db['pro_{}_{}'.format(col_prem,cvg)],1)<=round(temp_db['lev_{}_{}'.format(col_prem,cvg)],1) 
            temp_db.loc[temp_veh_mask & temp_lev_veh_mask & temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 1 
            temp_db.loc[~temp_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
            temp_db.loc[~temp_lev_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0
            temp_db.loc[~temp_pro_veh_mask, 'WIN_ACT_{}'.format(cvg)] = 0 
            if col_prem != 'tech_price':
                temp_pro_aged_veh_mask = temp_db['pro_{}_aged_{}'.format(col_prem,cvg)]>0
                temp_veh_mask =  round(temp_db['pro_{}_aged_{}'.format(col_prem,cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem,cvg)],1)
                temp_db.loc[temp_veh_mask & temp_pro_aged_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1 
                temp_db.loc[~temp_pro_aged_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            else:
                temp_veh_mask =  round(temp_db['pro_{}_{}'.format(col_prem,cvg)],1)<=round(temp_db['str_{}_{}'.format(col_prem,cvg)],1)
                temp_db.loc[temp_veh_mask & temp_pro_veh_mask & temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 1 
                temp_db.loc[~temp_pro_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0

            temp_db.loc[~temp_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
            temp_db.loc[~temp_str_veh_mask, 'WIN_STR_{}'.format(cvg)] = 0
                        
            temp_db.loc[temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 1
            temp_db.loc[~temp_pro_veh_mask, 'cvg_ind_{}'.format(cvg)] = 0 
        
        return temp_db
    
    def oboneway(lookup_db, lookup_db2, fld_name, book_name, col_prem):
        temp_subfields = lookup_db.index.unique().tolist()
        index = pd.MultiIndex.from_product([cov_list_st2, temp_subfields], names=['Coverage', 'Level'])
        temp_db = pd.DataFrame(index = index, columns=['Book'])
        temp_db['Variable']=fld_name 
        temp_db['Book']=book_name  
        # temp00[fld_name] =temp00[fld_name].astype(str)

        for fld_item in temp_subfields:
            for cvg in cov_list_st2:
                temp_db.at[(cvg, fld_item), 'Number_of_Veh'] = lookup_db.at[fld_item,'cvg_ind_{}'.format(cvg)]
                temp_db.at[(cvg, fld_item), 'Veh_Exposure_Mix'] = lookup_db2.at['cvg_ind_{}'.format(cvg)] #Added
                temp_db.at[(cvg, fld_item), 'Unwind_Total_Premium'] = lookup_db.at[fld_item,'unw_{}_{}'.format(col_prem, cvg)]
                temp_db.at[(cvg, fld_item), 'OnLevel_Total_Premium'] = lookup_db.at[fld_item,'lev_{}_{}'.format(col_prem, cvg)]
                temp_db.at[(cvg, fld_item), 'Street_Total_Premium'] = lookup_db.at[fld_item,'str_{}_{}'.format(col_prem, cvg)]
                temp_db.at[(cvg, fld_item), 'Proposed_Total_Premium'] = lookup_db.at[fld_item,'pro_{}_{}'.format(col_prem, cvg)]
                if col_prem != 'tech_price':
                    temp_db.at[(cvg, fld_item), 'Proposed_Aged_Total_Premium'] = lookup_db.at[fld_item,'pro_{}_aged_{}'.format(col_prem, cvg)]
                else:
                    temp_db.at[(cvg, fld_item), 'Proposed_Aged_Total_Premium'] = temp_db.at[(cvg, fld_item), 'Proposed_Total_Premium']
            
        temp_db['Actuarial_Impact'] = round((temp_db['Proposed_Total_Premium'] / temp_db['OnLevel_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Base_Impact'] = round((temp_db['Proposed_Total_Premium'] / temp_db['Unwind_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Unwind_Impact'] = round((temp_db['Unwind_Total_Premium'] / temp_db['OnLevel_Total_Premium']).fillna(np.nan)-1,4)
        temp_db['Street_Impact'] = round((temp_db['Proposed_Aged_Total_Premium'] / temp_db['Street_Total_Premium']).fillna(np.nan)-1,4)
            
        # temp_db['Veh_Exposure_Mix'] = 0
        
        for fld_item in temp_subfields:
            for cvg in cov_list_st2:
                if lookup_db.at[fld_item,'cvg_ind_{}'.format(cvg)]>0:
                    temp_db.at[(cvg, fld_item), 'Actuarial_Veh_Win_Rate'] = lookup_db.at[fld_item,'WIN_ACT_{}'.format(cvg)]/temp_db.at[(cvg, fld_item), 'Number_of_Veh']
                    temp_db.at[(cvg, fld_item), 'Street_Veh_Win_Rate'] = lookup_db.at[fld_item,'WIN_STR_{}'.format(cvg)]/temp_db.at[(cvg, fld_item), 'Number_of_Veh']
                    temp_db.at[(cvg, fld_item), 'Street_Avg_Veh_Premium'] = lookup_db.at[fld_item,'str_{}_{}'.format(col_prem,cvg)]/temp_db.at[(cvg, fld_item), 'Number_of_Veh']
                    temp_db.at[(cvg, fld_item), 'OnLevel_Avg_Veh_Premium'] = lookup_db.at[fld_item,'lev_{}_{}'.format(col_prem,cvg)]/temp_db.at[(cvg, fld_item), 'Number_of_Veh'] 
                    temp_db.at[(cvg, fld_item), 'Proposed_Avg_Veh_Premium'] = lookup_db.at[fld_item,'pro_{}_{}'.format(col_prem,cvg)]/temp_db.at[(cvg, fld_item), 'Number_of_Veh']  
    
                else:
                    temp_db.at[(cvg, fld_item), 'Actuarial_Veh_Win_Rate'] = np.nan
                    temp_db.at[(cvg, fld_item), 'Street_Veh_Win_Rate'] = np.nan
                    temp_db.at[(cvg, fld_item), 'Street_Avg_Veh_Premium'] = np.nan
                    temp_db.at[(cvg, fld_item), 'OnLevel_Avg_Veh_Premium'] = np.nan 
                    temp_db.at[(cvg, fld_item), 'Proposed_Avg_Veh_Premium'] = np.nan
            
        temp_db['Veh_Exposure_Mix'] = temp_db['Number_of_Veh']/temp_db['Veh_Exposure_Mix']
        temp_db.reset_index(inplace=True)
        temp_db.sort_values(by=['Level', 'Coverage'], inplace=True)
        
        #reorder
        temp_db=temp_db[['Book','Variable','Level','Coverage','Actuarial_Impact','Base_Impact','Unwind_Impact','Street_Impact',\
                       'Actuarial_Veh_Win_Rate','Street_Veh_Win_Rate','Veh_Exposure_Mix','Number_of_Veh','Street_Total_Premium',\
                       'OnLevel_Total_Premium','Proposed_Total_Premium','Street_Avg_Veh_Premium','OnLevel_Avg_Veh_Premium','Proposed_Avg_Veh_Premium']]

        return temp_db
    
    OB_ONEWAY_FLD=pd.read_csv(ref_dir + "/OB_ONEWAY_FIELDS.csv")
    looplist=OB_ONEWAY_FLD.FIELD
    
    ## PIF_CAPPED
    temp00=allmrg_temp01.copy()
    temp00 = agg_veh_impacts_OB1Way(temp00, 'cap_prem')
   
    ## aggregate
    OBONE=pd.DataFrame()

    for fld in looplist:
        temp00[fld] =temp00[fld].astype(str)
        lookup_db = temp00.groupby([fld])[winactcol+winstrcol+covindcol+capvehcol_pro_aged_prem2+capvehcol_str_prem2+\
                                          capvehcol_lev_prem2+capvehcol_unw_prem2+capvehcol_pro_prem2].sum()
        lookup_db2 = lookup_db[covindcol].sum() #added
        OBONE=OBONE.append(oboneway(lookup_db, lookup_db2, fld, 'PIF_CAPPED', 'cap_prem'))
                
    ## PIF_UNCAPPED
    temp00=allmrg_temp01.copy()
    temp00 = agg_veh_impacts_OB1Way(temp00, 'uncap_prem')

    ## aggregate
    for fld in looplist:
        temp00[fld] =temp00[fld].astype(str)
        lookup_db = temp00.groupby([fld])[winactcol+winstrcol+covindcol+uncapvehcol_pro_aged_prem2+uncapvehcol_str_prem2+\
                                          uncapvehcol_lev_prem2+uncapvehcol_unw_prem2+uncapvehcol_pro_prem2].sum()
        lookup_db2 = lookup_db[covindcol].sum() #added
        OBONE=OBONE.append(oboneway(lookup_db, lookup_db2, fld, 'PIF_UNCAPPED', 'uncap_prem'))
   
    ## NB_UNCAPPED
    if cls_run.nbnh_run_indicator:
        temp00=pd.DataFrame(allmrg_temp01[(allmrg_temp01.NBRN_TYP == 'NBNH')])
        temp00 = agg_veh_impacts_OB1Way(temp00, 'tech_price')
        
        ## aggregate
        for fld in looplist:
            temp00[fld] =temp00[fld].astype(str)
            lookup_db = temp00.groupby([fld])[winactcol+winstrcol+covindcol+uncapvehnbcol_str_prem2+\
                                              uncapvehnbcol_lev_prem2+uncapvehnbcol_unw_prem2+uncapvehnbcol_pro_prem2].sum()
            lookup_db2 = lookup_db[covindcol].sum() #added
            OBONE=OBONE.append(oboneway(lookup_db, lookup_db2, fld, 'NB_UNCAPPED', 'tech_price'))   
            
        OBONE.loc[OBONE.Book=='NB_UNCAPPED', ['Street_Impact','Street_Veh_Win_Rate','Street_Total_Premium','Street_Avg_Veh_Premium']] = np.nan
        
    OBONE.to_csv(temp_filepath,index=False)
    shutil.move(temp_filepath, out_dir+'/OB_1WAY'+cls_run.suffix_product+'.csv')
    
    return PIF_CAP_HH, PIF_UNCAP_HH, NB_UNCAP_HH
